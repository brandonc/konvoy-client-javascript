/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from '../api';
import { IoMesosphereDexV1alpha1ConnectorSpecOidcClientSecretRef } from './ioMesosphereDexV1alpha1ConnectorSpecOidcClientSecretRef';

export class IoMesosphereDexV1alpha1ConnectorSpecOidc {
    /**
     * Some providers require passing client secret via POST parameters instead of basic auth, despite the OAuth2 RFC discouraging it. Many of these cases are caught internally, but some may need to uncommented the following field.
     */
    'basicAuthUnsupported'?: boolean;
    'clientSecretRef': IoMesosphereDexV1alpha1ConnectorSpecOidcClientSecretRef;
    /**
     * When enabled, the OpenID Connector will query the UserInfo endpoint for additional claims. UserInfo claims take priority over claims returned by the IDToken. This option should be used when the IDToken doesn\'t contain all the claims requested. https://openid.net/specs/openid-connect-core-1_0.html#UserInfo
     */
    'getUserInfo'?: boolean;
    /**
     * Google supports whitelisting allowed domains when using G Suite (Google Apps). The following field can be set to a list of domains that can log in:
     */
    'hostedDomains'?: Array<string>;
    /**
     * Groups claims (like the rest of oidc claims through dex) only refresh when the id token is refreshed meaning the regular refresh flow doesn\'t update the groups claim. As such by default the oidc connector doesn\'t allow groups claims. If you are okay with having potentially stale group claims you can use this option to enable groups claims through the oidc connector on a per-connector basis.  This can be overridden with the below option
     */
    'insecureEnableGroups'?: boolean;
    /**
     * Some providers return claims without \"email_verified\", when they had no usage of emails verification in enrollment process or if they are acting as a proxy for another IDP (e.g., AWS Cognito with an upstream SAML IDP). This can be overridden with the below option.
     */
    'insecureSkipEmailVerified'?: boolean;
    /**
     * Canonical URL of the provider, also used for configuration discovery. This value MUST match the value returned in the provider config discovery. See: https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig
     */
    'issuer': string;
    /**
     * Dex\'s issuer URL + \"/callback\"
     */
    'redirectURI': string;
    /**
     * List of additional scopes to request in token response. Defaults to \"profile\" and \"email\"
     */
    'scopes'?: Array<string>;
    /**
     * Configurable key which contains the user id claim. Default to \"sub\" if not specified. Claims list at https://openid.net/specs/openid-connect-core-1_0.html#Claims
     */
    'userIDKey'?: string;
    /**
     * Configurable key which contains the user name claim. Default to \"name\" if not specified.
     */
    'userNameKey'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
        {
            name: 'basicAuthUnsupported',
            baseName: 'basicAuthUnsupported',
            type: 'boolean',
        },
        {
            name: 'clientSecretRef',
            baseName: 'clientSecretRef',
            type: 'IoMesosphereDexV1alpha1ConnectorSpecOidcClientSecretRef',
        },
        {
            name: 'getUserInfo',
            baseName: 'getUserInfo',
            type: 'boolean',
        },
        {
            name: 'hostedDomains',
            baseName: 'hostedDomains',
            type: 'Array<string>',
        },
        {
            name: 'insecureEnableGroups',
            baseName: 'insecureEnableGroups',
            type: 'boolean',
        },
        {
            name: 'insecureSkipEmailVerified',
            baseName: 'insecureSkipEmailVerified',
            type: 'boolean',
        },
        {
            name: 'issuer',
            baseName: 'issuer',
            type: 'string',
        },
        {
            name: 'redirectURI',
            baseName: 'redirectURI',
            type: 'string',
        },
        {
            name: 'scopes',
            baseName: 'scopes',
            type: 'Array<string>',
        },
        {
            name: 'userIDKey',
            baseName: 'userIDKey',
            type: 'string',
        },
        {
            name: 'userNameKey',
            baseName: 'userNameKey',
            type: 'string',
        },
    ];

    static getAttributeTypeMap() {
        return IoMesosphereDexV1alpha1ConnectorSpecOidc.attributeTypeMap;
    }
}
