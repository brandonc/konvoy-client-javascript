/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from '../api';
import { IoMesosphereDexV1alpha1ConnectorSpecGithubRootCASecretRef } from './ioMesosphereDexV1alpha1ConnectorSpecGithubRootCASecretRef';
import { IoMesosphereDexV1alpha1ConnectorSpecLdapBindSecretRef } from './ioMesosphereDexV1alpha1ConnectorSpecLdapBindSecretRef';
import { IoMesosphereDexV1alpha1ConnectorSpecLdapGroupSearch } from './ioMesosphereDexV1alpha1ConnectorSpecLdapGroupSearch';
import { IoMesosphereDexV1alpha1ConnectorSpecLdapUserSearch } from './ioMesosphereDexV1alpha1ConnectorSpecLdapUserSearch';

/**
 * This config for LDAP is derived from: https://github.com/dexidp/dex/blob/v2.19.0/connector/ldap/ldap.go#L53
 */
export class IoMesosphereDexV1alpha1ConnectorSpecLdap {
    /**
     * The name of the application service account to authenticate with the LDAP server. The connector uses the specified service account search for users and groups. Not required if the LDAP server provides access for anonymous auth.
     */
    'bindDN'?: string;
    'bindSecretRef'?: IoMesosphereDexV1alpha1ConnectorSpecLdapBindSecretRef;
    'groupSearch'?: IoMesosphereDexV1alpha1ConnectorSpecLdapGroupSearch;
    /**
     * Host and optional port of the LDAP server in the form \"host:port\". If the port is not supplied, it will be guessed based on `insecureNoSSL`, and `startTLS` fields. 389 for insecure or StartTLS connections, 636 otherwise.
     */
    'host': string;
    /**
     * Following field is required if the LDAP host is not using TLS (port 389). Because this option inherently leaks passwords to anyone on the same network as dex, THIS OPTION MAY BE REMOVED WITHOUT WARNING IN A FUTURE RELEASE.
     */
    'insecureNoSSL'?: boolean;
    /**
     * If a custom certificate isn\'t provide, this option can be used to turn off TLS certificate checks. As noted, it is insecure and shouldn\'t be used outside of explorative phases.
     */
    'insecureSkipVerify'?: boolean;
    'rootCASecretRef'?: IoMesosphereDexV1alpha1ConnectorSpecGithubRootCASecretRef;
    /**
     * Connect to the insecure port then issue a StartTLS command to negotiate a secure connection. If unsupplied secure connections will use the LDAPS protocol.
     */
    'startTLS'?: boolean;
    'userSearch'?: IoMesosphereDexV1alpha1ConnectorSpecLdapUserSearch;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
        {
            name: 'bindDN',
            baseName: 'bindDN',
            type: 'string',
        },
        {
            name: 'bindSecretRef',
            baseName: 'bindSecretRef',
            type: 'IoMesosphereDexV1alpha1ConnectorSpecLdapBindSecretRef',
        },
        {
            name: 'groupSearch',
            baseName: 'groupSearch',
            type: 'IoMesosphereDexV1alpha1ConnectorSpecLdapGroupSearch',
        },
        {
            name: 'host',
            baseName: 'host',
            type: 'string',
        },
        {
            name: 'insecureNoSSL',
            baseName: 'insecureNoSSL',
            type: 'boolean',
        },
        {
            name: 'insecureSkipVerify',
            baseName: 'insecureSkipVerify',
            type: 'boolean',
        },
        {
            name: 'rootCASecretRef',
            baseName: 'rootCASecretRef',
            type: 'IoMesosphereDexV1alpha1ConnectorSpecGithubRootCASecretRef',
        },
        {
            name: 'startTLS',
            baseName: 'startTLS',
            type: 'boolean',
        },
        {
            name: 'userSearch',
            baseName: 'userSearch',
            type: 'IoMesosphereDexV1alpha1ConnectorSpecLdapUserSearch',
        },
    ];

    static getAttributeTypeMap() {
        return IoMesosphereDexV1alpha1ConnectorSpecLdap.attributeTypeMap;
    }
}
